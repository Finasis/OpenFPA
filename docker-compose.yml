version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: openfpa_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-openfpa_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-openfpa_pass}
      POSTGRES_DB: ${POSTGRES_DB:-openfpa}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-openfpa_user} -d ${POSTGRES_DB:-openfpa}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - openfpa_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: openfpa_app
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-openfpa_user}:${POSTGRES_PASSWORD:-openfpa_pass}@postgres:5432/${POSTGRES_DB:-openfpa}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - openfpa_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: openfpa_frontend
    environment:
      NEXT_PUBLIC_API_URL: /api/v1
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - app
    networks:
      - openfpa_network
    command: npm run dev

volumes:
  postgres_data:
    name: openfpa_postgres_data

networks:
  openfpa_network:
    name: openfpa_network
    driver: bridge
