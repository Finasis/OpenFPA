#!/usr/bin/env python3
"""
Script to run Alembic migration inside Docker container.

This script coordinates running the autogenerated migration
within the Docker environment where the database is accessible.
"""

import subprocess
import time
import sys

def wait_for_container(container_name, max_attempts=30):
    """Wait for container to be ready."""
    for attempt in range(max_attempts):
        try:
            result = subprocess.run(
                ["docker", "ps", "--filter", f"name={container_name}", "--format", "{{.Status}}"],
                capture_output=True,
                text=True,
                check=True
            )
            if "Up" in result.stdout:
                print(f"✓ Container {container_name} is running")
                return True
        except subprocess.CalledProcessError:
            pass
        
        print(f"⏳ Waiting for {container_name} to be ready (attempt {attempt + 1}/{max_attempts})")
        time.sleep(2)
    
    return False

def run_command_in_container(container_name, command):
    """Run a command inside the specified container."""
    docker_cmd = ["docker", "exec", container_name] + command
    
    print(f"🚀 Running: {' '.join(docker_cmd)}")
    
    try:
        result = subprocess.run(docker_cmd, check=True, text=True, capture_output=True)
        print("✅ Command succeeded!")
        if result.stdout:
            print(f"Output: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Command failed: {e}")
        if e.stdout:
            print(f"Stdout: {e.stdout}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return False

def start_services():
    """Start Docker Compose services."""
    print("🐳 Starting Docker Compose services...")
    
    try:
        subprocess.run(["docker-compose", "up", "-d"], check=True)
        print("✅ Services started!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to start services: {e}")
        return False

def create_autogenerated_migration():
    """Create the autogenerated migration inside the Docker container."""
    
    print("🔄 Creating Alembic autogenerated migration from SQLAlchemy 2.0 models")
    print("=" * 70)
    
    # Start services
    if not start_services():
        return False
    
    # Wait for containers to be ready
    containers = ["openfpa_postgres", "openfpa_app"]
    for container in containers:
        if not wait_for_container(container):
            print(f"❌ Container {container} failed to start")
            return False
    
    # Wait a bit more for database to be fully ready
    print("⏳ Waiting for database to be fully ready...")
    time.sleep(5)
    
    # Create autogenerated migration
    migration_cmd = [
        "python", "-m", "alembic", 
        "revision", 
        "--autogenerate", 
        "-m", "Initial migration from SQLAlchemy 2.0 models"
    ]
    
    print("📝 Creating migration...")
    if run_command_in_container("openfpa_app", migration_cmd):
        print("✅ Migration created successfully!")
        
        # Show the generated migration file
        list_cmd = ["find", "/app/alembic_config/versions", "-name", "*.py", "-type", "f"]
        if run_command_in_container("openfpa_app", list_cmd):
            print("✅ Migration files listed")
        
        return True
    else:
        print("❌ Failed to create migration")
        return False

def apply_postgresql_migration():
    """Apply the existing PostgreSQL optimization migration."""
    
    print("🔄 Applying PostgreSQL optimization migration")
    print("=" * 50)
    
    # Copy the existing PostgreSQL optimization migration to the new Alembic structure
    copy_cmd = [
        "cp", 
        "/app/app/alembic/versions/002_postgresql_optimizations.py",
        "/app/alembic_config/versions/"
    ]
    
    print("📁 Copying PostgreSQL optimization migration...")
    if run_command_in_container("openfpa_app", copy_cmd):
        print("✅ Migration copied")
        
        # Apply the migration
        upgrade_cmd = ["python", "-m", "alembic", "upgrade", "head"]
        
        print("⬆️ Applying migrations...")
        if run_command_in_container("openfpa_app", upgrade_cmd):
            print("✅ Migrations applied successfully!")
            return True
        else:
            print("❌ Failed to apply migrations")
            return False
    else:
        print("❌ Failed to copy migration")
        return False

def main():
    """Main execution function."""
    
    print("🚀 Alembic Migration Automation in Docker")
    print("=" * 50)
    
    success = True
    
    # Step 1: Create autogenerated migration
    if create_autogenerated_migration():
        print("✅ Step 1: Autogenerated migration created")
    else:
        print("❌ Step 1: Failed to create autogenerated migration")
        success = False
    
    # Step 2: Apply PostgreSQL optimization migration
    if success and apply_postgresql_migration():
        print("✅ Step 2: PostgreSQL optimizations applied")
    else:
        print("❌ Step 2: Failed to apply PostgreSQL optimizations")
        success = False
    
    if success:
        print("\n🎉 All migrations completed successfully!")
        print("\nNext steps:")
        print("1. Review the generated migration files")
        print("2. Test the application with the new database schema")
        print("3. The database now has all optimizations applied")
    else:
        print("\n💥 Migration process failed")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)