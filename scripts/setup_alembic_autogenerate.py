#!/usr/bin/env python3
"""
Configure Alembic for optimal autogenerate functionality.

This script updates the Alembic env.py file to include best practices
for autogenerate, including proper model imports, include/exclude rules,
and PostgreSQL-specific configurations.
"""

import os
from pathlib import Path

def update_alembic_env():
    """Update the Alembic env.py file with autogenerate best practices."""
    
    env_file = Path("app/alembic/env.py")
    if not env_file.exists():
        print(f"Error: {env_file} not found")
        return False
    
    # Read current env.py content
    with open(env_file, 'r') as f:
        content = f.read()
    
    # Enhanced env.py template with autogenerate best practices
    enhanced_env = '''"""Alembic environment configuration with autogenerate best practices."""

from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context
import os

# Add the app directory to path for model imports
import sys
from pathlib import Path
app_dir = Path(__file__).parent.parent
sys.path.insert(0, str(app_dir))

# Import all models for autogenerate
from models.base import Base
from models import models  # This imports all model classes

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Set target metadata for autogenerate support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def include_object(object, name, type_, reflected, compare_to):
    """
    Filter function for autogenerate to include/exclude objects.
    
    This function provides fine-grained control over what gets included
    in autogenerated migrations.
    """
    # Skip objects marked for autogenerate exclusion
    if (type_ == "column" and 
        hasattr(object, 'info') and 
        object.info.get("skip_autogenerate", False)):
        return False
    
    # Skip temporary or test tables
    if type_ == "table" and name.startswith(("temp_", "test_")):
        return False
    
    # Skip system tables
    if type_ == "table" and name.startswith(("pg_", "information_schema")):
        return False
        
    # Include everything else
    return True

def include_name(name, type_, parent_names):
    """
    Filter function called before reflection to include/exclude names.
    
    This is called before SQLAlchemy reflection, providing early filtering
    of object names to improve performance.
    """
    # Skip system schemas
    if type_ == "schema" and name in ("information_schema", "pg_catalog", "pg_toast"):
        return False
        
    return True

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        # Enable PostgreSQL-specific features
        render_as_batch=False,  # PostgreSQL supports direct ALTER
        include_object=include_object,
        include_name=include_name,
        # PostgreSQL naming convention
        render_item=render_item,
    )

    with context.begin_transaction():
        context.run_migrations()

def render_item(type_, obj, autogen_context):
    """Apply custom rendering for migration items."""
    
    # Use schema-qualified names for better clarity
    if type_ == "table" and obj.schema:
        return f'"{obj.schema}"."{obj.name}"'
    
    # Default rendering
    return False

def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # Get database URL from environment variable if available
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        config.set_main_option("sqlalchemy.url", database_url)
    
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            # Autogenerate configuration
            include_object=include_object,
            include_name=include_name,
            render_as_batch=False,  # PostgreSQL supports direct ALTER
            render_item=render_item,
            # PostgreSQL-specific options
            compare_type=True,
            compare_server_default=True,
            # Transaction configuration
            transaction_per_migration=True,
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
'''
    
    # Backup original file
    backup_file = env_file.with_suffix('.py.backup')
    with open(backup_file, 'w') as f:
        f.write(content)
    
    # Write enhanced env.py
    with open(env_file, 'w') as f:
        f.write(enhanced_env)
    
    print(f"‚úì Updated {env_file}")
    print(f"‚úì Backup saved to {backup_file}")
    
    return True

def update_alembic_ini():
    """Update alembic.ini with autogenerate best practices."""
    
    ini_file = Path("alembic.ini")
    if not ini_file.exists():
        print(f"Error: {ini_file} not found")
        return False
    
    # Read current content
    with open(ini_file, 'r') as f:
        lines = f.readlines()
    
    # Add autogenerate-specific configurations
    enhanced_lines = []
    added_autogen_section = False
    
    for line in lines:
        enhanced_lines.append(line)
        
        # Add autogenerate settings after [alembic] section
        if line.strip() == "[alembic]" and not added_autogen_section:
            enhanced_lines.extend([
                "\\n",
                "# Autogenerate settings\\n",
                "# truncate migration slugs to 40 characters\\n", 
                "truncate_slug_length = 40\\n",
                "\\n",
                "# set to 'true' to run env.py during revision command\\n",
                "revision_environment = true\\n",
                "\\n",
                "# Post-write hooks for code formatting\\n",
                "[post_write_hooks]\\n",
                "hooks = black\\n",
                "\\n",
                "[post_write_hooks.black]\\n",
                "type = console_scripts\\n",
                "entrypoint = black\\n",
                "options = --line-length 88 REVISION_SCRIPT_FILENAME\\n",
                "\\n"
            ])
            added_autogen_section = True
    
    # Write enhanced ini file
    with open(ini_file, 'w') as f:
        f.writelines(enhanced_lines)
    
    print(f"‚úì Updated {ini_file} with autogenerate settings")
    
    return True

def main():
    """Main setup function."""
    
    print("üîß Setting up Alembic autogenerate configuration")
    print("=" * 50)
    
    success = True
    
    if update_alembic_env():
        print("‚úÖ Alembic env.py updated successfully")
    else:
        print("‚ùå Failed to update env.py")
        success = False
    
    if update_alembic_ini():
        print("‚úÖ alembic.ini updated successfully")  
    else:
        print("‚ùå Failed to update alembic.ini")
        success = False
    
    if success:
        print("\\n‚úÖ Alembic autogenerate setup completed!")
        print("\\nNow you can use:")
        print("  python scripts/create_migration_from_models.py")
        print("  # or directly:")
        print("  python -m alembic revision --autogenerate -m 'your message'")
    
    return success

if __name__ == "__main__":
    main()