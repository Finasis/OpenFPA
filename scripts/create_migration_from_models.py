#!/usr/bin/env python3
"""
Automated migration script using Alembic autogenerate feature.

This script creates a new Alembic migration based on the current state 
of SQLAlchemy models, following the best practices from the Alembic documentation.

It automatically detects changes between the current database schema and 
the model definitions, generating the appropriate migration script.
"""

import os
import sys
import subprocess
from pathlib import Path

# Add the app directory to Python path so we can import models
app_dir = Path(__file__).parent.parent / "app"
sys.path.insert(0, str(app_dir))

def setup_alembic_env():
    """Ensure Alembic environment is properly configured."""
    
    # Check if alembic.ini exists
    alembic_ini = Path("alembic.ini")
    if not alembic_ini.exists():
        print("Error: alembic.ini not found. Please run from project root directory.")
        return False
    
    # Check if alembic directory exists
    alembic_dir = Path("app/alembic")
    if not alembic_dir.exists():
        print("Error: app/alembic directory not found.")
        return False
        
    return True

def create_autogenerated_migration():
    """Create a new migration using Alembic's autogenerate feature."""
    
    if not setup_alembic_env():
        return False
    
    try:
        # Import models to ensure they're registered with SQLAlchemy metadata
        print("Loading SQLAlchemy models...")
        from models.models import Base
        from models.base import Base as NewBase
        
        # Verify models are properly loaded
        table_count = len(Base.metadata.tables) if hasattr(Base, 'metadata') else len(NewBase.metadata.tables)
        print(f"‚úì Found {table_count} tables in model metadata")
        
        # Generate migration name with timestamp
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        migration_name = f"sync_models_with_db_{timestamp}"
        
        print(f"Creating autogenerated migration: {migration_name}")
        
        # Run Alembic revision with autogenerate
        cmd = [
            "python", "-m", "alembic", 
            "revision", 
            "--autogenerate",
            "-m", migration_name
        ]
        
        # Set environment variables for proper model detection
        env = os.environ.copy()
        env['PYTHONPATH'] = str(app_dir)
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            env=env
        )
        
        if result.returncode == 0:
            print("‚úì Migration created successfully!")
            print(f"Output: {result.stdout}")
            
            # Extract migration file path from output
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'Generating' in line and '.py' in line:
                    migration_file = line.split()[-1]
                    print(f"‚úì Migration file: {migration_file}")
                    
                    # Add post-processing hooks if configured
                    apply_post_hooks(migration_file)
                    break
            
            return True
        else:
            print(f"‚úó Error creating migration: {result.stderr}")
            print(f"‚úó Stdout: {result.stdout}")
            return False
            
    except ImportError as e:
        print(f"‚úó Error importing models: {e}")
        print("Make sure the database models are properly defined and importable.")
        return False
    except Exception as e:
        print(f"‚úó Unexpected error: {e}")
        return False

def apply_post_hooks(migration_file):
    """Apply post-write hooks to the generated migration file."""
    
    try:
        # Check if Black formatter is available
        result = subprocess.run(['which', 'black'], capture_output=True)
        if result.returncode == 0:
            print("Applying Black formatting...")
            subprocess.run(['black', migration_file], check=True)
            print("‚úì Black formatting applied")
        else:
            print("Black formatter not found, skipping formatting")
            
    except Exception as e:
        print(f"Warning: Could not apply post-hooks: {e}")

def validate_migration_env():
    """Validate the Alembic environment configuration."""
    
    try:
        # Check if we can connect to database
        cmd = ["python", "-m", "alembic", "current"]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úì Current database revision: {result.stdout.strip() or 'No revisions'}")
            return True
        else:
            print(f"‚úó Database connection failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚úó Error validating environment: {e}")
        return False

def main():
    """Main execution function."""
    
    print("üîÑ Automated Alembic Migration Generator")
    print("=" * 50)
    
    # Validate environment
    if not validate_migration_env():
        print("‚ùå Environment validation failed")
        return False
    
    # Create autogenerated migration
    if create_autogenerated_migration():
        print("\n‚úÖ Migration generation completed successfully!")
        print("\nNext steps:")
        print("1. Review the generated migration file")
        print("2. Test the migration on a copy of your database")
        print("3. Apply the migration: python -m alembic upgrade head")
        return True
    else:
        print("\n‚ùå Migration generation failed")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)